View(A)
View(a)
library(lubridate)
library(stringi)
library(plyr)
library(dplyr)
library(DBI)
ruta_archivos_cluster <- ifelse(.Platform$OS.type == "unix",
"/Volumes/sacmod/archivos_snmb/",
"//madmexservices.conabio.gob.mx/sacmod/archivos_snmb/")
## PENDIENTE:
# el método actual puede ocasiona problemas en el caso original = TRUE si hay
# dos archivos con el mismo nombre los resultados fallarán.
# Se puede mejorar el código haciendo lazy evaluation y ejecutamos los queries
# hasta que filtramos.
### Arguments:
# file_type: recordings or images. It specifies which file paths should be
#   retrieved, either recordings or images from the camera trap.
# state: character vector of Mexican, defaults to all. Set the states that
#   should be serached for information.
# organization: conafor, conanp, fmcn, defaults to all. Which organizations
#   should be serached for information.
# cgl_id: character vector of conglomerate ids, defaults to all.
# year: numeric vector indicating the year(s), defaults to 2014:2016.
# month: numeric vector indicating the month(s), defaults to 1:12.
# tab: table to query: ei (especies invasoras), he (huella/excreta), camara
#   (trampa camara)
# noms: string que indica los nombres a agrupar separados por pipes, ej.
#   "Bos|taurus|vaca"
### Value
# A data.frame containing the following columns: file_type, state, organization,
# cgl_id (conglomerate id), date (visit), coords (coordinates of the conglomerate
# center), file_path.
queryInvaders <- function(state = "all", organization = "all",
cgl_id = "all", year_visit = 2010:2016, month_visit = 1:12, noms = "all"){
# connect to database (snmb)
PASS_SNMB = Sys.getenv("PASS_SNMB")
database <- src_postgres(dbname = "snmb", host = "dbms", user = "snmb",
password = PASS_SNMB)
cgl_table_aux <- tbl(database, "conglomerado_muestra") %>%
collect()
# set states and organization to valid values
if(state == "all"){
state <- unique(cgl_table_aux$estado)
}
if(organization == "all"){
organization <- unique(cgl_table_aux$institucion)
}
if(noms == "all"){
ei_aux <- tbl(database, "especie_invasora") %>%
collect() %>%
select(nombre_comun, nombre_cientifico)
ei_ex_aux <- tbl(database, "especie_invasora_extra") %>%
collect() %>%
select(nombre_comun, nombre_cientifico)
especies <- unique(c(ei_aux$nombre_comun, ei_aux$nombre_cientifico,
ei_ex_aux$nombre_comun, ei_ex_aux$nombre_cientifico))
especies <- especies[!is.na(especies) & especies != "NA"]
noms <- paste(especies, collapse = "|")
}
if(cgl_id == "all"){
cgl_id <- unique(cgl_table_aux$nombre)
}else if(class(cgl_id) == "numeric"){
cgl_id <- as.character(cgl_id)
}
# filter according to function arguments
cgl_table_filters <- cgl_table_aux %>%
mutate(
anio = year(fecha_visita),
mes = month(fecha_visita)
) %>%
filter(estado %in% state, institucion %in% organization,
nombre %in% cgl_id, anio %in% year_visit, mes %in% month_visit) %>%
select(conglomerado_muestra_id = id, cgl = nombre, institucion,
fecha_visita, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
if(nrow(cgl_table_filters) == 0){
RPostgreSQL::dbDisconnect(database$con)
print("No hay registros que cumplan los requisitos solicitados.")
final_table <- "No hay registros que cumplan los requisitos solicitados."
}else{
# agregar coordenadas ingresadas manualmente
cgl_table <- collect(tbl(database, "sitio_muestra")) %>%
filter(sitio_numero == "Centro") %>%
inner_join(cgl_table_filters, by = "conglomerado_muestra_id") %>%
mutate(
lat = lat_grado + lat_min/60 + lat_seg/3600,
lon = ifelse(lon_grado > 0,  lon_grado + lon_min/60 + lon_seg/3600,
-(lon_grado - lon_min/60 - lon_seg/3600)),
lon = -lon
) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita,
institucion, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
# registros de especies invasoras correspondientes a transectos
transecto_especie <- collect(tbl(database,
"transecto_especies_invasoras_muestra")) %>%
inner_join(cgl_table, by = c("conglomerado_muestra_id")) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_especies_invasoras_id = id, transecto_numero, comentario)
especie <- collect(tbl(database, "especie_invasora")) %>%
inner_join(transecto_especie,
by = c("transecto_especies_invasoras_id"))  %>%
filter(grepl(noms, nombre_comun, ignore.case = TRUE) |
grepl(noms, nombre_cientifico, ignore.case = TRUE)) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_numero,  comentario, especie_invasora_id = id,
nombre_en_lista, nombre_comun, nombre_cientifico, numero_individuos)
archivo_especie_trans <- tbl(database, "archivo_especie_invasora") %>%
collect() %>%
select(-archivo_nombre_original) %>%
inner_join(especie, by = c("especie_invasora_id")) %>%
mutate(
esta_dentro_conglomerado = "T",
tabla = "transecto_especie_invasora",
nuevo_nombre = gsub("(.*\\.).*\\.(.*\\.).*\\.", "\\1\\2", archivo),
path_archivos_cluster = paste(ruta_archivos_cluster, cgl, "/",
substr(fecha_visita, 1, 4), "_", substr(fecha_visita, 6, 7),
sep = ""),
path_imagen_cluster = paste(path_archivos_cluster,
"/especies_invasoras/", nuevo_nombre, sep = "")
) %>%
group_by(path_archivos_cluster) %>%
mutate(
path_formato_cluster =  list.files(path = path_archivos_cluster,
pattern = ".pdf", ignore.case = TRUE, full.names = TRUE)[1]
)
# registros de especies invasoras correspondientes a registros extra
especie_extra <- collect(tbl(database, "especie_invasora_extra")) %>%
inner_join(cgl_table, by = c("conglomerado_muestra_id"))  %>%
filter(grepl(noms, nombre_comun, ignore.case = TRUE) |
grepl(noms, nombre_cientifico, ignore.case = TRUE)) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
comentario, especie_invasora_id = id, nombre_en_lista,
nombre_comun, nombre_cientifico, numero_individuos,
esta_dentro_conglomerado)
archivo_especie_extra <- collect(
tbl(database, "archivo_especie_invasora_extra")) %>%
select(id, especie_invasora_id = especie_invasora_extra_id, archivo) %>%
inner_join(especie_extra, by = c("especie_invasora_id")) %>%
mutate(
transecto_numero = NA,
tabla = "especie_invasora_extra",
nuevo_nombre = gsub("(.*\\.).*\\.(.*\\.).*\\.", "\\1\\2", archivo),
path_archivos_cluster = paste(ruta_archivos_cluster, cgl, "/",
substr(fecha_visita, 1, 4), "_", substr(fecha_visita, 6, 7),
sep = ""),
path_imagen_cluster = paste(path_archivos_cluster,
"/registros_extra/", nuevo_nombre, sep = "")
) %>%
group_by(path_archivos_cluster) %>%
mutate(
path_formato_cluster =  list.files(path = path_archivos_cluster,
pattern = ".pdf", ignore.case = TRUE, full.names = TRUE)[1]
)
final_table <- rbind(archivo_especie_trans, archivo_especie_extra) %>%
ungroup() %>%
select(id, especie_invasora_id, conglomerado_muestra_id, cgl, lat, lon,
fecha_visita, institucion, estado, municipio, monitoreo_tipo,
vegetacion_tipo, perturbado, tabla, transecto_numero, comentario,
nombre_en_lista, nombre_comun, nombre_cientifico, numero_individuos,
esta_dentro_conglomerado, path_imagen_cluster, path_formato_cluster)
}
final_table
}
queryFootprints <- function(state = "all", organization = "all",
cgl_id = "all", year_visit = 2010:2016, month_visit = 1:12, noms = "all"){
# connect to database (snmb)
PASS_SNMB = Sys.getenv("PASS_SNMB")
database <- src_postgres(dbname = "snmb", host = "dbms", user = "snmb",
password = PASS_SNMB)
cgl_table_aux <- tbl(database, "conglomerado_muestra") %>%
collect()
# set states and organization to valid values
if(state == "all"){
state <- unique(cgl_table_aux$estado)
}
if(organization == "all"){
organization <- unique(cgl_table_aux$institucion)
}
if(noms == "all"){
he_aux <- tbl(database, "huella_excreta") %>%
collect() %>%
select(nombre_comun, nombre_cientifico)
he_ex_aux <- tbl(database, "huella_excreta_extra") %>%
collect() %>%
select(nombre_comun, nombre_cientifico)
huellas <- unique(c(he_aux$nombre_comun, he_aux$nombre_cientifico,
he_ex_aux$nombre_comun, he_ex_aux$nombre_cientifico))
huellas <- huellas[!is.na(huellas) & huellas != "NA"]
noms <- paste(huellas, collapse = "|")
}
if(cgl_id == "all"){
cgl_id <- unique(cgl_table_aux$nombre)
}else if(class(cgl_id) == "numeric"){
cgl_id <- as.character(cgl_id)
}
# filter according to function arguments
cgl_table_filters <- cgl_table_aux %>%
mutate(
anio = year(fecha_visita),
mes = month(fecha_visita)
) %>%
filter(estado %in% state, institucion %in% organization,
nombre %in% cgl_id, anio %in% year_visit, mes %in% month_visit) %>%
select(conglomerado_muestra_id = id, cgl = nombre, institucion,
fecha_visita, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
if(nrow(cgl_table_filters) == 0){
RPostgreSQL::dbDisconnect(database$con)
print("No hay registros que cumplan los requisitos solicitados.")
final_table <- "No hay registros que cumplan los requisitos solicitados."
}else{
# agregar coordenadas ingresadas manualmente
cgl_table <- collect(tbl(database, "sitio_muestra")) %>%
filter(sitio_numero == "Centro") %>%
inner_join(cgl_table_filters, by = "conglomerado_muestra_id") %>%
mutate(
lat = lat_grado + lat_min/60 + lat_seg/3600,
lon = ifelse(lon_grado > 0,  lon_grado + lon_min/60 + lon_seg/3600,
-(lon_grado - lon_min/60 - lon_seg/3600)),
lon = -lon
) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita,
institucion, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
# registros de huellas/excretas correspondientes a transectos
transecto_huella <- collect(tbl(database,
"transecto_huellas_excretas_muestra")) %>%
inner_join(cgl_table, by = c("conglomerado_muestra_id")) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_huellas_excretas_id = id, transecto_numero, comentario)
huella <- collect(tbl(database, "huella_excreta")) %>%
inner_join(transecto_huella,
by = c("transecto_huellas_excretas_id"))  %>%
filter(grepl(noms, nombre_comun, ignore.case = TRUE) |
grepl(noms, nombre_cientifico, ignore.case = TRUE)) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_numero,  comentario, huella_excreta_id = id,
es_huella, nombre_comun, nombre_cientifico, largo, ancho)
archivo_huella_trans <- collect(tbl(database, "archivo_huella_excreta")) %>%
select(-archivo_nombre_original) %>%
inner_join(huella, by = c("huella_excreta_id")) %>%
mutate(
esta_dentro_conglomerado = "T",
tabla = "transecto_huella_excreta",
nuevo_nombre = gsub("(.*\\.).*\\.(.*\\.).*\\.", "\\1\\2", archivo),
path_archivos_cluster = paste(ruta_archivos_cluster, cgl, "/",
substr(fecha_visita, 1, 4), "_", substr(fecha_visita, 6, 7),
sep = ""),
path_imagen_cluster = paste(path_archivos_cluster,
"/huellas_excretas/", nuevo_nombre, sep = "")
) %>%
group_by(path_archivos_cluster) %>%
mutate(
path_formato_cluster =  list.files(path = path_archivos_cluster,
pattern = ".pdf", ignore.case = TRUE, full.names = TRUE)[1]
)
# registros de huellas/excretas correspondientes a registros extra
huella_extra <- collect(tbl(database, "huella_excreta_extra")) %>%
inner_join(cgl_table, by = c("conglomerado_muestra_id"))  %>%
mutate(
transecto_numero = NA
) %>%
filter(grepl(noms, nombre_comun, ignore.case = TRUE) |
grepl(noms, nombre_cientifico, ignore.case = TRUE)) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_numero, comentario, huella_excreta_id = id, es_huella,
nombre_comun, nombre_cientifico, largo, ancho,
esta_dentro_conglomerado)
archivo_huella_extra <- collect(
tbl(database, "archivo_huella_excreta_extra")) %>%
select(id, huella_excreta_id = huella_excreta_extra_id, archivo) %>%
inner_join(huella_extra, by = c("huella_excreta_id")) %>%
mutate(
tabla = "huella_excreta_extra",
nuevo_nombre = gsub("(.*\\.).*\\.(.*\\.).*\\.", "\\1\\2", archivo),
path_archivos_cluster = paste(ruta_archivos_cluster, cgl,
"/", substr(fecha_visita, 1, 4), "_", substr(fecha_visita, 6, 7),
sep = ""),
path_imagen_cluster = paste(path_archivos_cluster,
"/registros_extra/", nuevo_nombre, sep = "")
) %>%
group_by(path_archivos_cluster) %>%
mutate(
path_formato_cluster =  list.files(path = path_archivos_cluster,
pattern = ".pdf", ignore.case = TRUE, full.names = TRUE)[1]
)
final_table <- ungroup(rbind(archivo_huella_trans,
archivo_huella_extra)) %>%
select(id, huella_excreta_id, conglomerado_muestra_id, cgl, lat, lon,
fecha_visita, institucion, estado, municipio, monitoreo_tipo,
vegetacion_tipo, perturbado, tabla, transecto_numero, comentario,
nombre_comun, nombre_cientifico, largo, ancho,
esta_dentro_conglomerado, path_imagen_cluster, path_formato_cluster)
}
final_table
}
querySpecimen <- function(state = "all", organization = "all",
cgl_id = "all", year_visit = 2010:2016, month_visit = 1:12, noms = "all"){
# connect to database (snmb)
PASS_SNMB = Sys.getenv("PASS_SNMB")
database <- src_postgres(dbname = "snmb", host = "dbms", user = "snmb",
password = PASS_SNMB)
cgl_table_aux <- tbl(database, "conglomerado_muestra") %>%
collect()
# set states and organization to valid values
if(state == "all"){
state <- unique(cgl_table_aux$estado)
}
if(organization == "all"){
organization <- unique(cgl_table_aux$institucion)
}
if(noms == "all"){
specimen_ex_aux <- tbl(database, "especimen_restos_extra") %>%
collect() %>%
select(nombre_comun, nombre_cientifico)
specimens <- unique(c(specimen_ex_aux$nombre_comun,
specimen_ex_aux$nombre_cientifico))
specimens <- specimens[!is.na(specimens) & specimens != "NA"]
noms <- paste(specimens, collapse = "|")
}
if(cgl_id == "all"){
cgl_id <- unique(cgl_table_aux$nombre)
}else if(class(cgl_id) == "numeric"){
cgl_id <- as.character(cgl_id)
}
# filter according to function arguments
cgl_table_filters <- cgl_table_aux %>%
mutate(
anio = year(fecha_visita),
mes = month(fecha_visita)
) %>%
filter(estado %in% state, institucion %in% organization,
nombre %in% cgl_id, anio %in% year_visit, mes %in% month_visit) %>%
select(conglomerado_muestra_id = id, cgl = nombre, institucion,
fecha_visita, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
if(nrow(cgl_table_filters) == 0){
RPostgreSQL::dbDisconnect(database$con)
print("No hay registros que cumplan los requisitos solicitados.")
final_table <- "No hay registros que cumplan los requisitos solicitados."
}else{
# agregar coordenadas ingresadas manualmente
cgl_table <- collect(tbl(database, "sitio_muestra")) %>%
filter(sitio_numero == "Centro") %>%
inner_join(cgl_table_filters, by = "conglomerado_muestra_id") %>%
mutate(
lat = lat_grado + lat_min/60 + lat_seg/3600,
lon = ifelse(lon_grado > 0,  lon_grado + lon_min/60 + lon_seg/3600,
-(lon_grado - lon_min/60 - lon_seg/3600)),
lon = -lon
) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita,
institucion, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
# registros de especimen/restos correspondientes a registros extra
specimen_extra <- collect(tbl(database, "especimen_restos_extra")) %>%
inner_join(cgl_table, by = c("conglomerado_muestra_id"))  %>%
filter(grepl(noms, nombre_comun, ignore.case = TRUE) |
grepl(noms, nombre_cientifico, ignore.case = TRUE)) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita, institucion,
estado, municipio, monitoreo_tipo, vegetacion_tipo, perturbado,
transecto_numero, comentario, especimen_restos_extra_id = id,
es_especimen, nombre_comun, nombre_cientifico, numero_individuos,
esta_dentro_conglomerado)
archivo_especimen_extra <- collect(
tbl(database, "archivo_especimen_restos_extra")) %>%
select(-archivo_nombre_original) %>%
inner_join(specimen_extra, by = c("especimen_restos_extra_id")) %>%
mutate(
tabla = "especimen_restos_extra",
nuevo_nombre = gsub("(.*\\.).*\\.(.*\\.).*\\.", "\\1\\2", archivo),
path_archivos_cluster = paste(ruta_archivos_cluster, cgl,
"/", substr(fecha_visita, 1, 4), "_", substr(fecha_visita, 6, 7),
sep = ""),
path_imagen_cluster = paste(path_archivos_cluster,
"/registros_extra/", nuevo_nombre, sep = "")
) %>%
group_by(path_archivos_cluster) %>%
mutate(
path_formato_cluster =  list.files(path = path_archivos_cluster,
pattern = ".pdf", ignore.case = TRUE, full.names = TRUE)[1]
)
final_table <- ungroup(rbind(archivo_huella_trans,
archivo_huella_extra)) %>%
select(id, huella_excreta_id, conglomerado_muestra_id, cgl, lat, lon,
fecha_visita, institucion, estado, municipio, monitoreo_tipo,
vegetacion_tipo, perturbado, tabla, transecto_numero, comentario,
nombre_comun, nombre_cientifico, largo, ancho,
esta_dentro_conglomerado, path_imagen_cluster, path_formato_cluster)
}
final_table
}
a <- queryInvaders()
b <- queryFootprints()
b
View(b)
list.files("Volumes/sacmod/archivos_snmb/76566/2014_06/")
b$path_imagen_cluster[1]
b$path_imagen_cluster[100]
queryCgls <- function(database, state = "all", organization = "all",
cgl_id = "all", year_visit = 2010:2016, month_visit = 1:12){
cgl_table_aux <- tbl(database, "conglomerado_muestra") %>%
collect()
# set states and organization to valid values
if(state == "all"){
state <- unique(cgl_table_aux$estado)
}
if(organization == "all"){
organization <- unique(cgl_table_aux$institucion)
}
if(cgl_id == "all"){
cgl_id <- unique(cgl_table_aux$nombre)
}else if(class(cgl_id) == "numeric"){
cgl_id <- as.character(cgl_id)
}
# filter according to function arguments
cgl_table_filters <- cgl_table_aux %>%
mutate(
anio = year(fecha_visita),
mes = month(fecha_visita)
) %>%
filter(estado %in% state, institucion %in% organization,
nombre %in% cgl_id, anio %in% year_visit, mes %in% month_visit) %>%
select(conglomerado_muestra_id = id, cgl = nombre, institucion,
fecha_visita, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
# agregar coordenadas ingresadas manualmente
cgl_table <- collect(tbl(database, "sitio_muestra")) %>%
filter(sitio_numero == "Centro") %>%
inner_join(cgl_table_filters, by = "conglomerado_muestra_id") %>%
mutate(
lat = lat_grado + lat_min/60 + lat_seg/3600,
lon = ifelse(lon_grado > 0,  lon_grado + lon_min/60 + lon_seg/3600,
-(lon_grado - lon_min/60 - lon_seg/3600)),
lon = -lon
) %>%
select(conglomerado_muestra_id, cgl, lat, lon, fecha_visita,
institucion, estado, municipio, monitoreo_tipo, vegetacion_tipo,
perturbado)
}
cgl_table <- queryCgls(database, state, organization, cgl_id, year_visit,
month_visit)
state
state="all"
year_visit = 2010:2016
organization = "all"
cgl_table <- queryCgls(database, state, organization, cgl_id, year_visit,
month_visit)
cgl_id = "all"
cgl_table <- queryCgls(database, state, organization, cgl_id, year_visit,
month_visit)
queryCgls(database, state, organization, cgl_id, year_visit,
month_visit)
cgl_table <- queryCgls(database, state, organization, cgl_id, year_visit,
month_visit)
cgl_table
?"source"
sims <- data.frame(beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
ggplot(sims, aes(x = beta_1)) + geom_histogram()
ggplot(sims, aes(x = beta_1)) + geom_histogram() + geom_density(color = "red")
sims <- data.frame(sim = 1:200, beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
library(ggplot2)
library(tidyr)
library(dplyr)
?spread
sims %>%
spread(var, val, -sim)
sims <- data.frame(sim = 1:200, beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
sims %>%
spread(var, val, -sim)
data.frame(sim = 1:200, beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
data.frame(sim = 1:200, beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
sims <- data.frame(sim = 1:200, beta_1 = rnorm(200), beta_2 = rnorm(200,2, 3),
beta_3 = rnorm(200, 0.2, 20))
head(sims)
sims %>%
spread(var, val, -sim)
?gather
sims %>%
gather(var, val, -sim)
sims_plot <- sims %>%
gather(var, val, -sim)
head(sims_plot)
ggplot(sims_plot, aes(x = val)) +
geom_histogram() +
facet_wrap(~var)
ggplot(sims_plot, aes(x = val)) +
geom_histogram() +
facet_wrap(~var, scales = "free")
ggplot(sims_plot, aes(x = val)) +
geom_density() +
facet_wrap(~var, scales = "free")
?source
load("../../../datos/mallaSiNaMBioD_2.Rdata")
head(malla)
load("../../../datos/malla.Rdata")
head(malla)
shiny::runApp()
shiny::runApp()
